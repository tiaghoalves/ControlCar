// <auto-generated />
using System;
using ControlCar.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ControlCar.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210916010137_VehicleYear")]
    partial class VehicleYear
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ControlCar.Models.Authentication", b =>
                {
                    b.Property<int>("IdAuthentication")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("User")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdAuthentication")
                        .HasName("pk_autentication")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Authentication");
                });

            modelBuilder.Entity("ControlCar.Models.Driver", b =>
                {
                    b.Property<int>("IdDriver")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Cellphone")
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(11)")
                        .HasMaxLength(11)
                        .IsUnicode(false);

                    b.Property<DateTime>("ExpirationDateCnh")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<string>("Office")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("varchar(38)");

                    b.Property<string>("Sector")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("TypeDriver")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("IdDriver")
                        .HasName("pk_Driver")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Driver");
                });

            modelBuilder.Entity("ControlCar.Models.Maintenance", b =>
                {
                    b.Property<int>("IdMaintenance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("Frequency")
                        .HasColumnType("datetime");

                    b.HasKey("IdMaintenance")
                        .HasName("pk_maintenance")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Maintenance");
                });

            modelBuilder.Entity("ControlCar.Models.Route", b =>
                {
                    b.Property<int>("IdRoute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Destiny")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<double?>("KmPattern")
                        .HasColumnType("float");

                    b.Property<string>("Source")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("IdRoute")
                        .HasName("pk_Route")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("Route");
                });

            modelBuilder.Entity("ControlCar.Models.Scheduling", b =>
                {
                    b.Property<int>("IdScheduling")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDatePerformed")
                        .HasColumnType("datetime");

                    b.Property<double?>("EndKm")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdAuthentication")
                        .HasColumnType("int");

                    b.Property<int?>("IdDriver")
                        .HasColumnType("int");

                    b.Property<int?>("IdRoute")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatusScheduling")
                        .HasColumnType("int");

                    b.Property<int?>("IdVehicle")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDatePerformed")
                        .HasColumnType("datetime");

                    b.HasKey("IdScheduling")
                        .HasName("pk_Scheduling")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdDriver");

                    b.HasIndex("IdRoute");

                    b.HasIndex("IdStatusScheduling");

                    b.HasIndex("IdVehicle");

                    b.ToTable("Scheduling");
                });

            modelBuilder.Entity("ControlCar.Models.StatusScheduling", b =>
                {
                    b.Property<int>("IdstatusScheduling")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdstatusScheduling")
                        .HasName("pk_status_Scheduling")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("StatusScheduling");
                });

            modelBuilder.Entity("ControlCar.Models.StatusVehicle", b =>
                {
                    b.Property<int>("IdstatusVehicle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("IdstatusVehicle")
                        .HasName("pk_status_vehicle")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("StatusVehicle");
                });

            modelBuilder.Entity("ControlCar.Models.Vehicle", b =>
                {
                    b.Property<int>("IdVehicle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Board")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Brand")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Chassi")
                        .IsRequired()
                        .HasColumnType("varchar(38)");

                    b.Property<string>("Color")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("IdStatusVehicle")
                        .HasColumnType("int");

                    b.Property<double>("Km")
                        .HasColumnType("float");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<int>("Renavam")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdVehicle")
                        .HasName("pk_Vehicle")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdStatusVehicle");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("ControlCar.Models.VehicleMaintenance", b =>
                {
                    b.Property<int>("IdVehicleMaintenance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateMaintenance")
                        .HasColumnType("datetime");

                    b.Property<int>("IdMaintenance")
                        .HasColumnType("int");

                    b.Property<int>("IdVehicle")
                        .HasColumnType("int");

                    b.HasKey("IdVehicleMaintenance")
                        .HasName("pk_veicmanu")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("IdMaintenance");

                    b.HasIndex("IdVehicle");

                    b.ToTable("VehicleMaintenance");
                });

            modelBuilder.Entity("ControlCar.Models.Scheduling", b =>
                {
                    b.HasOne("ControlCar.Models.Driver", "IdDriverNavigation")
                        .WithMany("Scheduling")
                        .HasForeignKey("IdDriver")
                        .HasConstraintName("fk_Scheduling_Driver")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ControlCar.Models.Route", "IdRouteNavigation")
                        .WithMany("Scheduling")
                        .HasForeignKey("IdRoute")
                        .HasConstraintName("fk_Scheduling_Route")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ControlCar.Models.Authentication", "IdSchedulingNavigation")
                        .WithOne("Scheduling")
                        .HasForeignKey("ControlCar.Models.Scheduling", "IdScheduling")
                        .HasConstraintName("fk_Scheduling_authentication")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ControlCar.Models.StatusScheduling", "IdStatusSchedulingNavigation")
                        .WithMany("Scheduling")
                        .HasForeignKey("IdStatusScheduling")
                        .HasConstraintName("fk_Scheduling_status_Scheduling")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ControlCar.Models.Vehicle", "IdVehicleNavigation")
                        .WithMany("Scheduling")
                        .HasForeignKey("IdVehicle")
                        .HasConstraintName("fk_Scheduling_Vehicle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ControlCar.Models.Vehicle", b =>
                {
                    b.HasOne("ControlCar.Models.StatusVehicle", "IdStatusVehicleNavigation")
                        .WithMany("Vehicle")
                        .HasForeignKey("IdStatusVehicle")
                        .HasConstraintName("fk_Vehicle_statusVehicle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ControlCar.Models.VehicleMaintenance", b =>
                {
                    b.HasOne("ControlCar.Models.Maintenance", "IdMaintenanceNavigation")
                        .WithMany("VehicleMaintenance")
                        .HasForeignKey("IdMaintenance")
                        .HasConstraintName("fk_veicmanu_maintenance")
                        .IsRequired();

                    b.HasOne("ControlCar.Models.Vehicle", "IdVehicleNavigation")
                        .WithMany("VehicleMaintenance")
                        .HasForeignKey("IdVehicle")
                        .HasConstraintName("fk_veicmanu_Vehicle")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
